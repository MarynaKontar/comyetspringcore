<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- В конструктор класса Event подставляем внутренний bean (Date и DateFormat). Внутренне бины не будут больше
   нигде видны и перееиспользовать их нельзя, но ими можно компактно описать бин Event.
   scope="prototype" - каждый раз вызывая getBean() будем получать новый bean и его зависимости каждый раз проинжектятся
   (т.е. Date каждый раз будет актуальная, а не та, что была при создании контекста). По умолчанию scope="singletone"
    - каждый раз при запросе бина у контейнера будет возвращать один и тот же бин, который создал при инициализации-->
    <bean id="event" class="com.yet.spring.core.loggers.Event" scope="prototype">
        <constructor-arg>
            <bean class="java.util.Date"/>
        </constructor-arg>
        <!-- DateFormat - абстрактный класс, у него нет конструктора и его надо вызывать статическими методами
        (getDateTimeInstance, getDateInstance, getTimeInstance). Spring это позволяет с помощью атрибута factory-method
          Если бы надо было передать аргументы в factory-method, то надо использовать <constructor-arg>-->
        <constructor-arg>
            <bean class="java.text.DateFormat" factory-method="getDateTimeInstance"/>
        </constructor-arg>
    </bean>

    <!--пишет event.toString в консоль -->
    <bean id="consoleEventLogger" class="com.yet.spring.core.loggers.ConsoleEventLogger"/>

    <!--записывает event.toString в файл -->
    <bean id="fileEventLogger" class="com.yet.spring.core.loggers.FileEventLogger" init-method="init">
        <constructor-arg value=
                                 "simpleSpringLogger.txt">
            <!-- "C:\Users\User\IdeaProjects\comyetspringcore\src\main\java\com\yet\spring\core\loggers\simpleSpringLogger.txt"/> -->
        </constructor-arg>
    </bean>

    <!-- сначала записывает event.toString в кеш, а при заполнении кеша (когда его размер больше cacheSize) -
    в файл (также как записывали в fileEventLogger). Если указать тег parent, то теперь мы наследуем его конструктор
     (аргумент конструктора "simpleSpringLogger.txt" уже не надо указывать здесь), а также его init() метод.
     Причем не обязательно, чтобы CacheFileEventLogger extends FileEventLogger(хотя у нас это так),
     наследуется определения одного бина другим.
      Также, надо, чтобы кеш сбрасывался в файл при завершении приложения. Т.е. если размер кеша еще не достиг cacheSize,
      а мы закрываем приложение, то данные из кеша должны сбрасываюттся в файл (для этого нужен метод destroy() в
      CacheFileEventLogger, а здесь и прописываем атрибут destroy-method Метод destroy() (тот метод, который прописан в
      аттрибуте destroy-method)вызовется перед закрытием контекста.-->
    <bean id="cacheFileEventLogger" class="com.yet.spring.core.loggers.CacheFileEventLogger"
          parent="fileEventLogger"
          destroy-method="destroy">
        <constructor-arg value="3"/>
    </bean>

    <bean id="combinedEventLogger" class="com.yet.spring.core.loggers.CombinedEventLogger">
        <constructor-arg>
            <list>
                <ref bean="consoleEventLogger"/>
                <ref bean="fileEventLogger"/>
            </list>
        </constructor-arg>
    </bean>

</beans>