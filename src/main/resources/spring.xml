<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"

       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
    <!-- Подключаем дополнительный name space: с,р-->

    <!--  <bean id="client" clacom.yet.spring.core.xml.beanseans.Client">
          <constructor-arg value="2"/>
          <constructor-arg value="John Smith"/> -->
          <!-- Можно указывать имя переменной в конструкторе, тип
          <constructor-arg name = "id" value="1"/>
          <constructor-arg name = "fullName" value="John Smith"/>
          <constructor-arg type = "java.lang.String" value="1"/>
          <constructor-arg type = "java.lang.String" value="John Smith"/>
          -->

        <!-- зависимости бинов можно задать и с помощью конструктора и с помощью атрибута property.
         Если тип переменной - класс бина, то надо использовать атрибут ref вместо value.
         Можно создавать внутренний бин (см. "event"), если значение переменной - не простой тип и не String, а например
         java.util.Date -->
    <!--     <property name="greeting" value="Hello there!"/>
     </bean>-->
     <alias name="client" alias="client2"/>

    <!--
    <bean id="client" clacom.yet.spring.core.xml.beanseans.Client">
        <constructor-arg value="${id}"/> <!- это значение перебьет то ,что в client.properties ->
        <constructor-arg value="${name}"/>
        <property name="greeting" value="${greeting}"/>
    </bean>
-->

   <!-- еще один способ записи параметров конструктора (<constructor-arg/> соответствует
    name space c: или c-ref:) и property (тег <property/> соотв. р: или р-ref:(ссылка на др. бин))
     Но надо не забыть подключить name space в в теге beans (xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c")
       Получается, что здесь мы используем не отдельные теги, а атрибуты тега bean (c и p) -->
    <bean id="client" class="com.yet.spring.core.xml.beans.Client"
          c:id="${id}"
          c:fullName="${name}"
          p:greeting="${greeting}" />

</beans>